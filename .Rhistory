tempByHour
myHOur
myHour
head(myHour)
head(tmpLogger)
tmpLogger<-read.csv("/Volumes/TEMP LOGGER/LOGGER04.csv",header=TRUE)
str(tmpLogger)
library(data.table)
tmpLogger<-data.table(tmpLogger)
str(tmpLogger)
library(lubridate)
myHour<-ymd_hms(tmpLogger$datetime)
myHour<-myHour[-1093]
myHour<-hour(myHour)
str(myHour)
tmpLogger<-tmpLogger[-1093]
str(tmpLogger)
tmpLogger<-cbind(tmpLogger,myHour)
str(tmpLogger)
library(dplyr)
tempByHour<-summarise(group_by(tmpLogger, myHour), mean=mean(temp))
tempByHour
tempByHour<-tempByHour[-1]
tempByHour
library(ggplot2)
qplot(myHour, mean, data=tempByHour, xlab="Hour: 0=Midnight, 23=11pm",xlim(c(0,23)), ylab="Average Hourly Temperature (F)", main="Temperature in Jay and Erika's bedroom for a single 24 hour period",sub="measured by an Adafruit temperature sensor")
library(tidyr)
library(dplyr)
data(preg)
library(BEST)
install.packages("rjags")
library(BEST)
library(BEST)
library(rjags)
library(rjags)
library(BEST)
y1 <- c(5.77, 5.33, 4.59, 4.33, 3.66, 4.48)> y2 <- c(3.88, 3.55, 3.29, 2.59, 2.33, 3.59)
y1 <- c(5.77, 5.33, 4.59, 4.33, 3.66, 4.48)
y2 <- c(3.88, 3.55, 3.29, 2.59, 2.33, 3.59)
y1
y2
t.test(y1,y2)
BESTout <- BESTmcmc(y1, y2)
BESTout <- BESTmcmc(y1, y2)
BESTout
plot(BESTout)
plot(BESTout, compVal=1, ROPE=c(-0.1,0.1))
plot(BESTout, which="sd")
plotAll(BESTout)
plot(BESTout, compVal=1, ROPE=c(-0.1,0.1))
rnrom(10)
y1<-rnorm(10,10,3)
y2<-rnorm(10,11,3.5)
t.test(y1,y2)
BESTout2 <- BESTmcmc(y1, y2)
plot(BESTout2)
y1<-rnorm(10,10,3)
y2<-rnorm(10,11,3.5)
BESTout2 <- BESTmcmc(y1, y2)
plot(BESTout2)
y1
mean(y1)
mean(y2)
sum(runif)
sum(runif(10))
for (i=1, 10, i++) {x[i]<-i}
for (i in 1:10, i++) {x[i]<-i}
for (i in 1:10) {x[i]<-i}
x
for (i in 1:10) {print i}
for (i in 1:10) {print (i)}
for (i in 1:10) {x[i]<-0}
x
x
x<-0
x
for (i in 1:10) {x[i]<-0}
x
for (i in 1:10) {x[i]<-i}
x
for (i in 1:10) {x[i]<-sum(runif(10))}
x
mean(x)
sd(x)
for (i in 1:10) {x[i]<-sum(runif(10))}
mean(x)
sd(x)
for (i in 1:10) {x[i]<-sum(runif(10))}
mean(x)
sd(x)
for (i in 1:10) {y[i]<-sum(runif(10))}
mean(y)
y<-0
for (i in 1:10) {y[i]<-sum(runif(10))}
mean(y)
sd(y)
mean(x)
sd(x)
t.test(x,y)
BESTxy<-BESTmcmc(y,x)
library(BEST)
BESTxy<-BESTmcmc(y,x)
plot(BESTxy)
plotALL(BESTxy)
for (i in 1:10) {x[i]<-sum(runif(10))}
for (i in 1:10) {y[i]<-sum(runif(11))}
mean(x)
mean(y)
for (i in 1:10) {x[i]<-sum(runif(10))}
for (i in 1:10) {y[i]<-sum(runif(11))}
mean(x)
mean(y)
sd(x)
sd(y)
for (i in 1:10) {x[i]<-sum(runif(10))}
for (i in 1:10) {y[i]<-sum(runif(10))}
for (i in 1:10) {y[i]<-sum(runif(12))}
mean(y)-mean(x)
y
x<-o
x<-0
y<-0
for (i in 1:10) {y[i]<-sum(runif(10))}
for (i in 1:10) {x[i]<-sum(runif(12))}
mean(x)
mean(y)
var(x)
var(y)
m<-mean(x)-mean(y)
m
mean<-c(1,3)
mean(c(1,3))
m
s<-mean(c(var(x),var(y)))
s
s<-sqrt(s)
s
e<-m/s
e
t.test(x,y)
BESTxy<-BESTmcmc(x,y)
library(BEST)
BESTxy<-BESTmcmc(x,y)
plotALL(BESTxy)
plotAll(BESTxy)
plotAll(BESTxy)
for (i in 1:10) {y[i]<-floor(sum(runif(10)))}
sum(runif(10))
floor(sum(runif(10)))
for (i in 1:10) {y[i]<-floor(sum(runif(10)))}
y
for (i in 1:10) {y[i]<-min(floor(sum(runif(10))),5)}
y
mean(y)
for (i in 1:10) {x[i]<-min(floor(sum(runif(8))),5)}
x
mean(x)
t.test(x,y)
for (i in 1:10) {y[i]<-floor(sum(runif(10)))}
a<-0
b<-0
for (i in 1:10) {
a<-sum(runif(10))-10
a<-a*2.5
x[i]<-a
}
x
sus1<-0
sus2<-0
j<-0
for (j in 1:10)
for (i in 1:10) {
a<-sum(runif(10))
x[i]<-a
}
sus1[j]<-sum(x)
}
for (j in 1:10) {
for (i in 1:10) {
a<-sum(runif(10))
x[i]<-a
}
sus1[j]<-sum(x)
}
sus1
for (j in 1:10) {
for (i in 1:10) {
a<-sum(runif(10))
x[i]<-a
}
sus1[j]<-(sum(x)-10)*2.5
}
sus1
for (j in 1:10) {
for (i in 1:10) {
a<-max(5,sum(runif(10)))
x[i]<-a
}
sus1[j]<-(sum(x)-10)*2.5
}
sus1
x
a<-max(5,sum(runif(10)))
a
for (i in 1:10) {
a<-max(5,sum(runif(10)))
x[i]<-a
}
x
for (j in 1:10) {
for (i in 1:10) {
a<-min(5,sum(runif(10)))
x[i]<-a
}
sus1[j]<-(sum(x)-10)*2.5
}
sus1
round(sus1,2)
signif(sus1,3)
for (j in 1:10) {
for (i in 1:10) {
a<-min(5,sum(runif(8)))
y[i]<-a
}
sus2[j]<-(sum(x)-10)*2.5
}
signif(sus1,3)
signif(sus2,3)
for (j in 1:10) {
for (i in 1:10) {
a<-min(5,sum(runif(8)))
y[i]<-a
}
sus2[j]<-(sum(y)-10)*2.5
}
signif(sus2,3)
mean(x)
mean(y)
mean(sus1)
mean(sus2)
x
a<-round(min(5,sum(runif(10))),0)   # the max value is five and the values are rounded to integers
a
a<-round(min(5,sum(runif(10))),0)   # the max value is five and the values are rounded to integers
a
for (j in 1:10) {           # Generate 10 SUS scores
for (i in 1:10) {           # Created by summing 10 scores from an "individual"
a<-round(min(5,sum(runif(10))),0)   # Each individual score is the max of 5 or the sum of 10 values from
x[i]<-a                             # a random uniform distribution.
}                                   # So these will be very high SUS scores, mostly 4s and 5s.
sus1[j]<-(sum(x)-10)*2.5             # This part does the SUS scoring from raw values.
}
signif(sus1,3)                       # Print the SUS scores and the mean over all SUS scores.
signif(mean(sus1),3)                 # Both values are rounded to 3 significant digits.
for (j in 1:10) {
for (i in 1:10) {
a<-round(min(5,sum(runif(8))),0) # 8 values from a random uniform are used here to produce lower
y[i]<-a                         # simulated SUS scores.
}
sus2[j]<-(sum(y)-10)*2.5
}
signif(sus2,3)
signif(mean(sus1),3)
signif(mean(sus1),3)
signif(mean(sus2),3)
t.test(sus1,sus2)
t_values<-t.test(sus1,sus2)
str(t_values)
t_values$p.value
N_PEOPLE_GROUP1 <-10 #number of individuals in each of two groups
N_PEOPLE_GROUP2 <-10
NUM_SUS_Qs <- 10 #the number of questions in the SUS summated scale (could be used for other summated scales).
HI<-10 # number of random uniform values to sum together to simulate HI scores.
LO<-8  # ditto low scores.
MIN_SCALE_VALUE<-NA #we're not worried about the min scale value always.
MAX_SCALE_VALUE<-5 # max scale value (e.g. a 5 point scale has a max value of 5 typically)
for (j in 1:N_PEOPLE_GROUP1) {     # Generate SUS scores for "individuals" in group 1.
for (i in 1:NUM_SUS_Qs) {           # Created by summing 10 scores from an "individual"
a<-round(min(MAX_SCALE_VALUE,sum(runif(HI))),0)   # Each individual score has a maximum value of MAX_SCALE_VALUE
x[i]<-a                             # or the sum of a HI number of values from a random uniform distribution.
}                                   # So these will be very high SUS scores, mostly 4s and 5s.
sus1[j]<-(sum(x)-10)*2.5             # This part does the SUS scoring from raw values.
}
signif(sus1,3)                       # Print the SUS scores and the mean over all SUS scores.
signif(mean(sus1),3)                 # Both values are rounded to 3 significant digits.
for (j in 1:N_PEOPLE_GROUP2) {
for (i in 1:NUM_SUS_Qs) {
a<-round(min(MAX_SCALE_VALUE,sum(runif(LO))),0) # 8 values from a random uniform are used here to produce lower
y[i]<-a                          # simulated SUS scores.
}
sus2[j]<-(sum(y)-10)*2.5
}
signif(sus2,3)
signif(mean(sus1),3)
signif(mean(sus2),3)
t_values<-t.test(sus1,sus2)
t_values$p.value
str(t_values)
t_values$statistic
R<-0
k<-0
BESTout<-BESTmcmc(sus1,sus2) # BEST (Bayesian) object
str(BESTout)
range(sus1)
range(sus2)
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
str(RESULTS_LIST)
RESULTS_LIST[[1]]
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
str(RESULTS_LIST)
RESULTS_LIST[[k]]<-list(sus1, sus2)
RESULTS_LIST[[1]]
RESULTS_LIST[[k]]<-list(sus1=sus1, sus2=sus2)
RESULTS_LIST
RESULTS_LIST[[1]]$sus1
RESULTS_LIST[[1]$sus1]
RESULTS_LIST[[1]][1]
RESULTS_LIST()<-list()
RESULTS_LIST<-list()
RESULTS_LIST[[k]]<-list(sus1=sus1, sus2=sus2)
RESULTS_LIST
list[k]$sus1
RESULTS_LIST[2]$sus1
RESULTS_LIST[[2]]$sus1
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
RESULTS_LIST
str(t_values)
t_values$p.value
if (t_values$p.value > 0.5) {notSig<-1}
else {notSig<-0}
if (t_values$p.value > 0.05) {notSig<-1} else {notSig<-0}
notSig
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
str(RESULTS_LIST)
mean(RESULTS_LIST$Not_Significant)
RESULTS_LIST[[1]]$Not_Significant
mean(unlist(RESULTS_LIST$Not_Significant))
RESULTS_LIST$Not_Significant
RESULTS_LIST[[1]]
RESULTS_LIST[1]
RESULTS_LIST[1]$Not_Significant
RESULTS_LIST[[1]]$Not_Significant
RESULTS_LIST[[1:100]]$Not_Significant
RESULTS_LIST[[c(1,100)]]$Not_Significant
RESULTS_LIST[c(1,100)]$Not_Significant
RESULTS_LIST[c(1,3)]
RESULTS_LIST[c(1,3)]$Not_Significant
is.list(RESULTS_LIST[1])
RESULTS_LIST[1]
RESULTS_LIST[1]$Not_Significant
RESULTS_LIST[[1]]$Not_Signficiant
RESULTS_LIST[[1]]
RESULTS_LIST[[1]]$Not_Significant
RESULTS_LIST[[c(1,2)]]$Not_Significant
RESULTS_LIST[c(1,2)]$Not_Significant
RESULTS_LIST[c(1,2)]
RESULTS_LIST[[1]][[1]]
RESULTS_LIST[[1]][[2]]
RESULTS_LIST[c(1,2][[2]]
RESULTS_LIST[c(1,2)][[2]]
RESULTS_LIST[[c(1,2)]][[2]]
RESULTS_LIST[[2]][[2]]
RESULTS_LIST[[1:2]][[2]]
RESULTS_LIST[1]$Not_Significant
RESULTS_LIST$Not_Significant
sapply(RESULTS_LIST, mean)
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
sapply( T_LIST, function(t) if(t$p.value > 0.05) {count++})
count<-0
count_sig <- function(t) {
if (t$p.value > 0.05) count++
}
count<-0
count_sig <- function(t) {
if (t$p.value > 0.05) count<-count+1
}
sapply( T_LIST, count_sig )
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
sig_count
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
sig_count
T_LIST[1]
T_LIST[1]$p.value
str(T_LIST[1])
tt<-T_LIST[1]
tt$p.value
jj<-t.test(sus1,sus2)
jj
jj$p.value
unlist(tt)
unlist(tt)$p.value
is.list(tt)
tt[1]
tt[[1]]
str(tt)
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
RESULTS_LIST[1]
sig_count<-sapply( RESULTS_LIST, function(l) t.test )
str(t.test)
str(sig_count)
is.list(sig_count)
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
is.list(T_LIST)
sapply(T_LIST, function(l) l$p.value)
sapply(T_LIST, function(l) p.value)
sapply(T_LIST, function(l) l$conf.int)
T_LIST[1]
T_LIST[[1]]
RESULTS_LIST[1]
T_LIST<-sapply( RESULTS_LIST, function(l) t.test(l$sus1, l$sus2) )
T_LIST[1]
T_LIST[[1]]
t.test(T_LIST[1]$sus1, T_LIST[1]$sus2)
str(T_LIST)
T_LIST<-sapply( RESULTS_LIST, function(l) list(t.test(l$sus1, l$sus2)) )
str(T_LIST)
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
T_LIST[1]
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
T_LIST[1]
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
T_LIST[1]
T_LIST[1]$p.value
T_LIST[[1]]$p.value
sapply(T_LIST function(t) t$p.value)
sapply(T_LIST, function(t) t$p.value)
sapply (T_LIST, function(t) t$p.value > 0.05)
T_LIST
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
sapply(T_LIST, function(t) t$p.value)
sapply (T_LIST, function(t) t$p.value > 0.05)
T_LIST[1]
T_LIST[1]$p.value
T_LIST[[1]]$p.value
T_LIST[[1]]
is.list(T_LIST[1])
is.list(T_LIST[[1]])
T_LIST[[1]][[1]]
T_LIST[[1]][[1]]$P.VALUE
T_LIST[[1]][[1]]$p.value
for (q in 1:100) {
values[q]<-T_LIST[[q]][[q]]$p.value
}
myValues<-0
for (q in 1:100) {
myValues[q]<-T_LIST[[q]][[q]]$p.value
}
myValues<-0
for (q in 1:10) {
myValues[q]<-T_LIST[[q]][[q]]$p.value
}
myValues<-0
for (q in 1:REPLICATES) {
myValues[q]<-T_LIST[[q]][[q]]$p.value
}
T_LIST[[1]][[1]]$p.values
T_LIST[[1]][[1]]$p.value
T_LIST[[2]][[1]]$p.value
T_LIST[2]$p.value
myValues<-0
for (q in 1:REPLICATES) {
myValues[q]<-T_LIST[[q]][[1]]$p.value
}
myValues
sum(myValues > 0.05)
mean(myValues > 0.05)
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
mean(myValues)
sum(myValues)
length(myValues)
count<-0
for (h in 1:1000) {}
for (h in 1:1000) {if (myValues[h] > 0.05 count<-count+1}
for (h in 1:1000) {if (myValues[h] > 0.05) count<-count+1}
count
myValues
source('~/Google Drive/R Stuff/R Simulations/SUS/SUS simulation - 2 Groups.R')
sum(myValues > 0.05)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
plot(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
colors()
install.packages("RColorBrewer")
pBaltimoreByYearandType<- summarise(group_by(filter(NEI, fips == "24510"), year, type), Total_Emissions=sum(Emissions))
pBaltimoreByYearandType<- summarise(group_by(filter(NEI, fips == "24510"), year, type), Total_Emissions=sum(Emissions))
install.packages("ProjectTemplate")
library('ProjectTemplate')
create.project('letters')
source('~/.active-rstudio-document')
x
str(activity_no_NA)
stepsByInterval<- activity_no_NA %>%
group_by(Interval = as.factor(interval)) %>%
summarise(AverageSteps = mean(steps))
stepsByInterval
View(stepsByInterval)
